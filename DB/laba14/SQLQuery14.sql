USE UNIVER;
GO
CREATE TABLE TR_AUDIT
(
ID INT IDENTITY,
STMT VARCHAR(20)
CHECK (STMT IN ('INS', 'DEL', 'UPD')),
TRNAME VARCHAR(50),
CC VARCHAR(300)
)
GO
CREATE TRIGGER TR_TEACHER_INS
ON TEACHER AFTER INSERT
AS
DECLARE @ONE CHAR(10), @TWO VARCHAR(100), @THREE CHAR(1), @FOUR CHAR(20), @ALL VARCHAR(300);
PRINT 'Добавление';
SET @ONE = (SELECT TEACHER FROM INSERTED);
SET @TWO= (SELECT TEACHER_NAME FROM INSERTED);
SET @THREE= (SELECT GENDER FROM INSERTED);
SET @FOUR = (SELECT PULPIT FROM INSERTED);
SET @ALL = @ONE+' '+ @TWO +' '+ @THREE+ ' ' +@FOUR;
INSERT INTO TR_AUDIT(STMT, TRNAME, CC)
VALUES('INS', 'TR_TEACHER_INS', @ALL);
RETURN;
GO
INSERT INTO TEACHER (TEACHER, TEACHER_NAME, GENDER, PULPIT)
VALUES ('ДАИ','ЛОБАНОВ ВЛАДИМИР ДМИТРИЕВИЧ','М','ИСИТ')

SELECT * FROM TR_AUDIT

drop TABLE TR_AUDIT
------------------------------2>

GO
CREATE TRIGGER TR_TEACHER_DEL
ON TEACHER AFTER DELETE
AS
DECLARE @ONE CHAR(10), @TWO VARCHAR(100), @THREE CHAR(1), @FOUR CHAR(20), @ALL VARCHAR(300);
PRINT 'Удаление';
SET @ONE = (SELECT TEACHER FROM DELETED);
SET @TWO= (SELECT TEACHER_NAME FROM DELETED);
SET @THREE= (SELECT GENDER FROM DELETED);
SET @FOUR = (SELECT PULPIT FROM DELETED);
SET @ALL = @ONE+' '+ @TWO +' '+ @THREE+ ' ' +@FOUR;
INSERT INTO TR_AUDIT(STMT, TRNAME, CC)
VALUES('DEL', 'TR_TEACHER_DEL', @ALL);
RETURN;
GO
DELETE FROM TEACHER 
WHERE TEACHER_NAME = 'ЛОБАНОВ ВЛАДИМИР ДМИТРИЕВИЧ'
SELECT * FROM TR_AUDIT
------------------------------3>

GO
CREATE  TRIGGER TR_TEACHER_UPD
ON TEACHER AFTER UPDATE
AS
DECLARE @ONE CHAR(10), @TWO VARCHAR(100), @THREE CHAR(1), @FOUR CHAR(20), @ALL VARCHAR(300);
PRINT 'Обновление';
SET @ONE = (SELECT TEACHER FROM INSERTED);
SET @TWO= (SELECT TEACHER_NAME FROM INSERTED);
SET @THREE= (SELECT GENDER FROM INSERTED);
SET @FOUR = (SELECT PULPIT FROM INSERTED);
SET @ALL = @ONE+' '+ @TWO +' '+ @THREE+ ' ' +@FOUR;
SET @ONE = (SELECT TEACHER FROM DELETED);
SET @TWO= (SELECT TEACHER_NAME FROM DELETED);
SET @THREE= (SELECT GENDER FROM DELETED);
SET @FOUR = (SELECT PULPIT FROM DELETED);
SET @ALL =@ALL + '' + @ONE+' '+ @TWO +' '+ @THREE+ ' ' +@FOUR;
INSERT INTO TR_AUDIT(STMT, TRNAME, CC)
VALUES('UPD', 'TR_TEACHER_UPD', @ALL);
RETURN;
GO
UPDATE TEACHER SET GENDER = 'Ж' WHERE TEACHER_NAME = 'ЛОБАНОВ ВЛАДИМИР ДМИТРИЕВИЧ'
SELECT * FROM TR_AUDIT
------------------------------4>

GO
CREATE  TRIGGER TR_TEACHER   
ON TEACHER AFTER INSERT, DELETE, UPDATE
AS
DECLARE @ONE CHAR(10), @TWO VARCHAR(100), @THREE CHAR(1), @FOUR CHAR(20), @ALL VARCHAR(300);
DECLARE @INS INT = (SELECT COUNT(*) FROM INSERTED), @DEL INT = (SELECT COUNT(*) FROM DELETED);
IF @INS > 0 AND @DEL = 0
BEGIN
PRINT 'Добавление';
SET @ONE = (SELECT TEACHER FROM INSERTED);
SET @TWO= (SELECT TEACHER_NAME FROM INSERTED);
SET @THREE= (SELECT GENDER FROM INSERTED);
SET @FOUR = (SELECT PULPIT FROM INSERTED);
SET @ALL = @ONE+' '+ @TWO +' '+ @THREE+ ' ' +@FOUR;
INSERT INTO TR_AUDIT(STMT, TRNAME, CC)
VALUES('INS', 'TR_TEACHER_INS', @ALL);
END
ELSE
IF @INS = 0 AND @DEL > 0
BEGIN
PRINT 'Удаление';
SET @ONE = (SELECT TEACHER FROM DELETED);
SET @TWO= (SELECT TEACHER_NAME FROM DELETED);
SET @THREE= (SELECT GENDER FROM DELETED);
SET @FOUR = (SELECT PULPIT FROM DELETED);
SET @ALL = @ONE+' '+ @TWO +' '+ @THREE+ ' ' +@FOUR;
INSERT INTO TR_AUDIT(STMT, TRNAME, CC)
VALUES('DEL', 'TR_TEACHER_DEL', @ALL);
END
ELSE
BEGIN
PRINT 'Обновление';
SET @ONE = (SELECT TEACHER FROM INSERTED);
SET @TWO= (SELECT TEACHER_NAME FROM INSERTED);
SET @THREE= (SELECT GENDER FROM INSERTED);
SET @FOUR = (SELECT PULPIT FROM INSERTED);
SET @ALL = @ONE+' '+ @TWO +' '+ @THREE+ ' ' +@FOUR;
SET @ONE = (SELECT TEACHER FROM DELETED);
SET @TWO= (SELECT TEACHER_NAME FROM DELETED);
SET @THREE= (SELECT GENDER FROM DELETED);
SET @FOUR = (SELECT PULPIT FROM DELETED);
SET @ALL =@ALL + '' + @ONE+' '+ @TWO +' '+ @THREE+ ' ' +@FOUR;
INSERT INTO TR_AUDIT(STMT, TRNAME, CC)
VALUES('UPD', 'TR_TEACHER_UPD', @ALL);
END
RETURN;
GO
INSERT INTO TEACHER (TEACHER, TEACHER_NAME, GENDER, PULPIT)
VALUES ('ЛВД','ЛОБАНОВ ВЛАДИМИР ДМИТРИЕВИЧ','М','ИСИТ')
DELETE FROM TEACHER 
WHERE TEACHER_NAME = 'ЛОБАНОВ ВЛАДИМИР ДМИТРИЕВИЧ'
UPDATE TEACHER SET GENDER = 'Ж' WHERE TEACHER_NAME = 'ЛОБАНОВ ВЛАДИМИР ДМИТРИЕВИЧ'
SELECT * FROM TR_AUDIT
------------------------------5>

GO
INSERT INTO TEACHER(TEACHER,TEACHER_NAME,GENDER,PULPIT)
VALUES(1,2,4,4)
UPDATE TEACHER SET GENDER = '5' WHERE TEACHER_NAME = 'ЛОБАНОВ ВЛАДИМИР ДМИТРИЕВИЧ'
SELECT * FROM TR_AUDIT
------------------------------6>

GO
CREATE TRIGGER TEACH_AFTER_DEL1 ON TEACHER AFTER DELETE
AS PRINT '1';
RETURN;
GO
CREATE TRIGGER TEACH_AFTER_DEL2 ON TEACHER AFTER DELETE
AS PRINT '2';
RETURN;
GO
CREATE TRIGGER TEACH_AFTER_DEL3 ON TEACHER AFTER DELETE
AS PRINT '3';
RETURN;
GO
DELETE TEACHER WHERE TEACHER_NAME = 'ЛОБАНОВ ВЛАДИМИР ДМИТРИЕВИЧ'
SELECT T.NAME, E.TYPE_DESC
FROM SYS.TRIGGERS  T JOIN  SYS.TRIGGER_EVENTS E  ON T.OBJECT_ID = E.OBJECT_ID
WHERE OBJECT_NAME(T.PARENT_ID)='TEACHER' AND E.TYPE_DESC = 'DELETE' ;
EXEC  SP_SETTRIGGERORDER @TRIGGERNAME = 'TEACH_AFTER_DEL3',
@ORDER='FIRST', @STMTTYPE = 'DELETE';
EXEC  SP_SETTRIGGERORDER @TRIGGERNAME = 'TEACH_AFTER_DEL2',
@ORDER='LAST', @STMTTYPE = 'DELETE';
-----------------------------7>

GO
CREATE TRIGGER PTRAN
ON PULPIT AFTER INSERT, DELETE, UPDATE
AS DECLARE @C INT = (SELECT COUNT (*) FROM PULPIT);
IF (@C >20)
BEGIN
RAISERROR('ОБЩАЯ КОЛИЧЕСТВО КАФЕДР НЕ МОЖЕТ БЫТЬ >20', 10, 1);
ROLLBACK;
END;
RETURN;
INSERT INTO PULPIT(PULPIT) VALUES ('АБВГ');
-----------------------------8>

GO
CREATE TRIGGER F_INSTEAD_OF
ON FACULTY INSTEAD OF DELETE
AS
BEGIN
RAISERROR (N'УДАЛЕНИЕ ЗАПРЕЩЕНО', 10, 1);
RETURN;	
END;
DELETE FACULTY WHERE FACULTY = 'NEW';
DROP TRIGGER F_INSTEAD_OF,PTRAN,TEACH_AFTER_DEL1,TEACH_AFTER_DEL2,TEACH_AFTER_DEL3,TR_TEACHER 
-----------------------------9>

GO
create trigger DDL_TEACHER on database for DDL_DATABASE_LEVEL_EVENTS -- для всех ддл операторов
as
declare @t varchar(50) = EVENTDATA().value('(/EVENT_INSTANCE/EventType)[1]', 'varchar(50)');
declare @t1 varchar(50) = EVENTDATA().value('(/EVENT_INSTANCE/ObjectName)[1]', 'varchar(50)');
declare @t2 varchar(50) = EVENTDATA().value('(/EVENT_INSTANCE/ObjectType)[1]', 'varchar(50)');
if @t1 = 'TEACHER'
begin
print 'Тип события: ' + @t;
print 'Имя объекта: ' + @t1;
print 'Тип объекта: ' + @t2;
raiserror ('Операции с таблицей TEACHER запрещены',16,1);
rollback;
end;

alter table TEACHER Drop column TEACHER_NAME;
